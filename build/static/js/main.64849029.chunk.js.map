{"version":3,"sources":["components/Cell.js","components/Row.js","components/Board.js","components/BoardHead.js","App.js","index.js"],"names":["Cell","props","data","isOpen","hasMine","react_default","a","createElement","className","onContextMenu","e","preventDefault","onClick","open","count","flag","hasFlag","Row","cells","map","index","components_Cell","key","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createBoard","board","i","rows","push","j","columns","x","y","mines","randomRow","Math","floor","random","randomCol","cell","status","state","setState","changeFlagAmount","Promise","resolve","findMines","then","numberOfMines","current","openCells","console","log","newRows","onCellClick","openAroundCell","endGame","minesInProximity","row","col","length","nextProps","_this2","components_Row","Component","BoardHead","minutes","time","formattedSeconds","concat","flagsUsed","reset","App","checkForWinner","gameStatus","alert","setInterval","fn","t","intervals","clearInterval","assign","baseState","tick","amount","flagCount","handleCellClick","prevState","nextState","components_BoardHead","components_Board","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.64849029.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n const Cell= props => {\r\n     let renderCell= ()=>{\r\n        if (props.data.isOpen) {\r\n            if (props.data.hasMine) {\r\n              return (\r\n                <div\r\n                  className=\"cell open\"\r\n                  onContextMenu={e => {\r\n                    e.preventDefault();\r\n                  }}\r\n                  onClick={() => props.open(props.data)}\r\n                >\r\n                  <span><i className=\"icon ion-android-radio-button-on\"></i></span>\r\n                </div>\r\n              );\r\n            } else if (props.data.count === 0) {\r\n              return (\r\n                <div\r\n                  className=\"cell open\"\r\n                  onContextMenu={e => {\r\n                    e.preventDefault();\r\n                    props.flag(props.data);\r\n                  }}\r\n                  onClick={() => props.open(props.data)}\r\n                />\r\n              );\r\n            } else {\r\n              return (\r\n                <div\r\n                  className=\"cell open\"\r\n                  onContextMenu={e => {\r\n                  \r\n                    e.preventDefault();\r\n                  }}\r\n                  onClick={() => props.open(props.data)}\r\n                >\r\n                  {props.data.count}\r\n                </div>\r\n              );\r\n            }\r\n          } else if (props.data.hasFlag) {\r\n            return (\r\n              <div\r\n                className=\"cell open-flag\"\r\n                onContextMenu={e => {\r\n                  e.preventDefault();\r\n                  props.flag(props.data);\r\n                }}\r\n                onClick={() => props.open(props.data)}\r\n              >\r\n                <span><i className=\"icon ion-flag\"></i></span>\r\n              </div>\r\n            );\r\n          } else {\r\n            return (\r\n              <div\r\n                className=\"cell\"\r\n                onContextMenu={e => {\r\n                  e.preventDefault();\r\n                  props.flag(props.data);\r\n                }}\r\n                onClick={() => props.open(props.data)}\r\n              />\r\n            );\r\n          }\r\n     }\r\n  return renderCell();\r\n}\r\nexport default Cell;","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\n\r\nconst Row = props => {\r\n  let cells = props.cells.map((data, index) => (\r\n    <Cell data={data} open={props.open} flag={props.flag} key={index} />\r\n  ));\r\n  return <div className=\"row\">{cells}</div>;\r\n};\r\n\r\nexport default Row;\r\n","import React, { Component } from 'react'\r\nimport Row from './Row'\r\nclass Board extends Component {\r\n \r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      rows: this.createBoard(props)\r\n    };\r\n  }\r\n\r\n \r\n  componentWillReceiveProps(nextProps) {\r\n    if (\r\n      this.props.openCells > nextProps.openCells ||\r\n      this.props.columns !== nextProps.columns\r\n    ) {\r\n      this.setState({\r\n        rows: this.createBoard(nextProps)\r\n      });\r\n    }\r\n  }\r\n\r\n  createBoard = props => {\r\n    \r\n    let board = [];\r\n    for (let i = 0; i < props.rows; i++) {\r\n      board.push([]);\r\n      for (let j = 0; j < props.columns; j++) {\r\n        board[i].push({\r\n          x: j,\r\n          y: i,\r\n          count: 0,\r\n          isOpen: false,\r\n          hasMine: false,\r\n          hasFlag: false\r\n        });\r\n      }\r\n    }\r\n \r\n    for (let i = 0; i < props.mines; i++) {\r\n      let randomRow = Math.floor(Math.random() * props.rows);\r\n      let randomCol = Math.floor(Math.random() * props.columns);\r\n\r\n      let cell = board[randomRow][randomCol];\r\n\r\n      if (cell.hasMine) {\r\n      \r\n        i--;\r\n      } else {\r\n        cell.hasMine = true;\r\n      }\r\n    }\r\n    return board;\r\n  };\r\n\r\n  \r\n  flag = cell => {\r\n    if (this.props.status === \"ended\") {\r\n      return;\r\n    }\r\n    let rows = this.state.rows;\r\n\r\n    cell.hasFlag = !cell.hasFlag;\r\n    this.setState({ rows });\r\n    this.props.changeFlagAmount(cell.hasFlag ? -1 : 1);\r\n  };\r\n\r\n  open = cell => {\r\n    if (this.props.status === \"ended\") {\r\n      return;\r\n    }\r\n    \r\n    let asyncCountMines = new Promise(resolve => {\r\n      let mines = this.findMines(cell);\r\n      resolve(mines);\r\n    });\r\n\r\n    asyncCountMines.then(numberOfMines => {\r\n      let rows = this.state.rows;\r\n\r\n      let current = rows[cell.y][cell.x];\r\n\r\n      if (current.hasMine && this.props.openCells === 0) {\r\n        console.log(\"mine was on first click\");\r\n        let newRows = this.createBoard(this.props);\r\n        this.setState({ rows: newRows }, () => {\r\n          this.open(cell);\r\n        });\r\n      } else {\r\n        if (!cell.hasFlag && !current.isOpen) {\r\n          this.props.onCellClick();\r\n\r\n          current.isOpen = true;\r\n          current.count = numberOfMines;\r\n\r\n          this.setState({ rows });\r\n         \r\n          if (!current.hasMine && numberOfMines === 0) {\r\n            this.openAroundCell(cell);\r\n          }\r\n\r\n          if (current.hasMine && this.props.openCells !== 0) {\r\n            this.props.endGame();\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  findMines = cell => {\r\n    let minesInProximity = 0;\r\n    for (let row = -1; row <= 1; row++) {\r\n      for (let col = -1; col <= 1; col++) {\r\n        if (cell.y + row >= 0 && cell.x + col >= 0) {\r\n          if (\r\n            cell.y + row < this.state.rows.length &&\r\n            cell.x + col < this.state.rows[0].length\r\n          ) {\r\n            if (\r\n              this.state.rows[cell.y + row][cell.x + col].hasMine &&\r\n              !(row === 0 && col === 0)\r\n            ) {\r\n              minesInProximity++;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return minesInProximity;\r\n  };\r\n\r\n  openAroundCell = cell => {\r\n    let rows = this.state.rows;\r\n\r\n    for (let row = -1; row <= 1; row++) {\r\n      for (let col = -1; col <= 1; col++) {\r\n        if (cell.y + row >= 0 && cell.x + col >= 0) {\r\n          if (\r\n            cell.y + row < this.state.rows.length &&\r\n            cell.x + col < this.state.rows[0].length\r\n          ) {\r\n            if (\r\n              !this.state.rows[cell.y + row][cell.x + col].hasMine &&\r\n              !rows[cell.y + row][cell.x + col].isOpen\r\n            ) {\r\n              this.open(rows[cell.y + row][cell.x + col]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let rows = this.state.rows.map((cells, index) => (\r\n      <Row\r\n        cells={cells}\r\n        open={this.open}\r\n        flag={this.flag}\r\n        key={index}\r\n      />\r\n    ));\r\n    return <div className=\"board\">{rows}</div>;\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst BoardHead = props => {\r\n  let minutes = Math.floor(props.time / 60);\r\n  let formattedSeconds = props.time - minutes * 60 || 0;\r\n\r\n  formattedSeconds =\r\n    formattedSeconds < 10 ? `0${formattedSeconds}` : formattedSeconds;\r\n  let time = `${minutes}:${formattedSeconds}`;\r\n  let status =\r\n    props.status === \"running\" || props.status === \"waiting\"|| props.status=== \"winner\" ? (\r\n      <i className=\"icon ion-happy-outline yellow\" />\r\n    ) : (\r\n      <i className=\"icon ion-sad-outline yellow\" />\r\n    );\r\n  return (\r\n    <div className=\"board-head\">\r\n      <div className=\"flag-count\">{props.flagsUsed}</div>\r\n      <button className=\"reset\" onClick={props.reset}>\r\n        {status}\r\n      </button>\r\n      <div className=\"timer\">{time}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nBoardHead.propTypes = {\r\n  time: PropTypes.number.isRequired,\r\n  flagsUsed: PropTypes.number.isRequired\r\n};\r\n\r\nexport default BoardHead;\r\n","import React, { Component } from 'react'\nimport Board from './components/Board'\nimport BoardHead from './components/BoardHead'\nimport './App.css'\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      gameStatus: \"waiting\", \n      time: 0, \n      flagCount: 10,\n      openCells: 0,\n      mines: 10,\n      rows: 10,\n      columns: 10\n    };\n\n    this.baseState = this.state;\n  }\n\n  componentDidUpdate(nextProps, nextState) {\n    if (this.state.gameStatus === \"running\") {\n      this.checkForWinner();\n    }\n  }\n  \n\n  checkForWinner = () => {\n    if (this.state.mines + this.state.openCells >= this.state.rows * this.state.columns) {\n      this.setState({\n        gameStatus: \"winner\"\n      }, alert(\"you won!\"))\n    }\n  }\n\n  componentWillMount() {\n    this.intervals = [];\n  }\n\n  setInterval = (fn, t) => {\n    this.intervals.push(setInterval(fn, t));\n  };\n\n  reset = () => {\n    this.intervals.map(clearInterval);\n    this.setState(Object.assign({}, this.baseState), () => {\n      this.intervals = [];\n    });\n  };\n\n  tick = () => {\n    if (this.state.openCells > 0 && this.state.gameStatus === \"running\") {\n      let time = this.state.time + 1;\n      this.setState({ time });\n    }\n  };\n\n  endGame = () => {\n    this.setState({\n      gameStatus: \"ended\"\n    });\n  };\n\n  changeFlagAmount = amount => {\n    this.setState({ flagCount: this.state.flagCount + amount });\n  };\n\n  handleCellClick = () => {\n    if (this.state.openCells === 0 && this.state.gameStatus !== \"running\") {\n      this.setState(\n        {\n          gameStatus: \"running\"\n        },\n        this.setInterval(this.tick, 1000)\n      );\n    }\n    this.setState(prevState => {\n      return { openCells: prevState.openCells + 1 };\n    });\n  };\n  render() {\n    \n    return (\n      <div className=\"minesweeper\">\n      <BoardHead\n          time={this.state.time}\n          flagsUsed={this.state.flagCount}\n          reset={this.reset}\n          status={this.state.gameStatus}\n        />\n        <Board  openCells={this.state.openCells}\n                mines={this.state.mines}\n                rows={this.state.rows}\n                columns={this.state.columns}\n                endGame={this.endGame}\n                status={this.state.gameStatus}\n                onCellClick={this.handleCellClick}\n                changeFlagAmount={this.changeFlagAmount}\n                                                />\n      </div>\n    )\n    \n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}